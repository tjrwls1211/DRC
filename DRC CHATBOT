import React, { useState } from 'react';
import { View, Text, TextInput, TouchableOpacity, ScrollView, StyleSheet, KeyboardAvoidingView, Linking } from 'react-native';

// 기본 챗봇 응답
const chatbotResponses = {
  "급가속": "급가속은 갑작스럽게 가속하는 상황을 말합니다. 이를 방지하기 위해 서서히 가속하는 것이 좋습니다.",
  "급제동": "급제동은 갑작스럽게 브레이크를 밟는 상황입니다. 주의해서 안전하게 운전하세요.",
  "주행정보": "주행 정보는 속도, 연비 등의 데이터를 기반으로 차량 상태를 확인할 수 있습니다.",
  "앱 도움말": "앱에 대한 도움이 필요하면 고객센터에 문의해 주세요.",
  "고객지원": "고객지원과 관련된 정보는 고객센터에서 확인 가능합니다.",
};

const ChatbotScreen = ({ navigation }) => {
  const [messages, setMessages] = useState([{ text: "무엇을 도와드릴까요?", isBot: true }]);
  const [inputText, setInputText] = useState('');
  const [showQueryButtons, setShowQueryButtons] = useState(false);
  const [showBackOnly, setShowBackOnly] = useState(false); // 급발진 처리용 상태
  const [showCountermeasure, setShowCountermeasure] = useState(false); // 대처방법 표시용 상태

  const handleSend = () => {
    if (inputText.trim() === '') return;

    const newMessage = { text: inputText, isBot: false };
    setMessages([...messages, newMessage]);

    const botResponse = chatbotResponses[inputText] || "죄송합니다, 해당 질문에 대한 답변을 찾지 못했습니다.";
    setMessages(prevMessages => [...prevMessages, { text: botResponse, isBot: true }]);

    setInputText('');
  };

  const handleButtonPress = (buttonText) => {
    const botResponse = chatbotResponses[buttonText];
    if (botResponse) {
      setMessages(prevMessages => [...prevMessages, { text: botResponse, isBot: true }]);
    }

    if (buttonText === "급가속" || buttonText === "급제동") {
      setShowQueryButtons(true);
    } else if (buttonText === "급발진") {
      setShowBackOnly(true);
    } else if (buttonText === "주행정보") {
      setShowQueryButtons(true); // 주행정보 버튼 클릭 시 조회 버튼 표시
    } else if (buttonText === "고객지원") {
      handleEmailSupport(); // 고객지원 버튼 클릭 시 이메일 보내기
    }
  };

  const handleEmailSupport = () => {
    const email = "btr0809@naver.com";
    const subject = encodeURIComponent("고객 지원 요청");
    const body = encodeURIComponent("안녕하세요,\n\n고객 지원 요청 내용:\n\n");

    // 이메일 링크 생성
    const mailtoUrl = `mailto:${email}?subject=${subject}&body=${body}`;
    Linking.openURL(mailtoUrl).catch(err => console.error("Unable to open email client", err));

    setMessages(prevMessages => [...prevMessages, { text: "이메일 클라이언트를 열었습니다. 요청 내용을 작성하세요.", isBot: true }]);
  };

  const handleCountermeasurePress = () => {
    const countermeasureResponse = 
      "급발진 대처방법:\n\n" +
      "1. **브레이크 페달을 강하게 밟기**\n" +
      "즉시 브레이크 페달을 최대한 강하게 밟아 차량 속도를 줄이도록 합니다.\n\n" +
      "2. **기어를 중립(N)으로 전환**\n" +
      "브레이크를 밟으면서 변속 레버를 중립(N) 기어로 바꿉니다. 이렇게 하면 엔진의 동력 전달이 차단됩니다.\n\n" +
      "3. **엔진을 끄기 (시동 Off)**\n" +
      "기어를 중립으로 변경한 후, 차량이 완전히 멈추지 않았다면 시동을 끄는 것도 고려할 수 있습니다.\n\n" +
      "4. **비상등을 켜고 차선 변경**\n" +
      "차량을 안전한 곳으로 옮기기 위해 비상등을 켜고 천천히 차선 변경을 시도합니다.\n\n" +
      "5. **핸드브레이크 사용**\n" +
      "차량이 멈추지 않으면 핸드브레이크를 점차적으로 당겨 제동을 시도합니다.\n\n" +
      "6. **정차 후 도움 요청**\n" +
      "차량이 안전하게 정차하면, 즉시 전문가의 도움을 요청합니다.";

    setMessages(prevMessages => [...prevMessages, { text: countermeasureResponse, isBot: true }]);
    setShowCountermeasure(false); // 대처방법 표시 후 버튼 숨김
  };

  const handleQueryPress = () => {
    setMessages(prevMessages => [...prevMessages, { text: "조회 버튼이 클릭되었습니다.", isBot: true }]);
  };

  const handleBackPress = () => {
    setShowQueryButtons(false);
    setShowBackOnly(false);
    setShowCountermeasure(false); // 대처방법 버튼 숨김
  };

  return (
    <KeyboardAvoidingView style={styles.container} behavior="padding">
      <ScrollView contentContainerStyle={styles.chatContainer}>
        {messages.map((message, index) => (
          <View key={index} style={[styles.messageContainer, message.isBot ? styles.botMessage : styles.userMessage]}>
            <Text style={styles.messageText}>{message.text}</Text>
          </View>
        ))}

        {/* 급가속, 급제동 및 주행정보 버튼 클릭 시 조회 및 뒤로가기 버튼 표시 */}
        {showQueryButtons ? (
          <View style={styles.queryButtonsContainer}>
            <TouchableOpacity style={styles.queryButton} onPress={handleQueryPress}>
              <Text style={styles.queryButtonText}>조회</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.queryButton} onPress={handleBackPress}>
              <Text style={styles.queryButtonText}>뒤로가기</Text>
            </TouchableOpacity>
          </View>
        ) : showBackOnly ? (
          <View style={styles.queryButtonsContainer}>
            <TouchableOpacity style={styles.queryButton} onPress={handleCountermeasurePress}>
              <Text style={styles.queryButtonText}>대처방법</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.queryButton} onPress={handleBackPress}>
              <Text style={styles.queryButtonText}>뒤로가기</Text>
            </TouchableOpacity>
          </View>
        ) : (
          <View style={styles.buttonsContainer}>
            <View style={styles.row}>
              <TouchableOpacity style={styles.button} onPress={() => handleButtonPress("급가속")}>
                <Text style={styles.buttonText}>급가속</Text>
              </TouchableOpacity>
              <TouchableOpacity style={styles.button} onPress={() => handleButtonPress("급제동")}>
                <Text style={styles.buttonText}>급제동</Text>
              </TouchableOpacity>
              <TouchableOpacity style={styles.button} onPress={() => handleButtonPress("급발진")}>
                <Text style={styles.buttonText}>급발진</Text>
              </TouchableOpacity>
            </View>
            <View style={styles.row}>
              <TouchableOpacity style={styles.button} onPress={() => handleButtonPress("주행정보")}>
                <Text style={styles.buttonText}>주행정보</Text>
              </TouchableOpacity>
              <TouchableOpacity style={styles.button} onPress={() => handleButtonPress("앱 도움말")}>
                <Text style={styles.buttonText}>앱 도움말</Text>
              </TouchableOpacity>
              <TouchableOpacity style={styles.button} onPress={() => handleButtonPress("고객지원")}>
                <Text style={styles.buttonText}>고객지원</Text>
              </TouchableOpacity>
            </View>
          </View>
        )}
      </ScrollView>

      <View style={styles.inputContainer}>
        <TextInput
          style={styles.input}
          placeholder="메시지를 입력하세요"
          value={inputText}
          onChangeText={setInputText}
        />
        <TouchableOpacity style={styles.sendButton} onPress={handleSend}>
          <Text style={styles.sendButtonText}>보내기</Text>
        </TouchableOpacity>
      </View>
    </KeyboardAvoidingView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f7f7f7',
  },
  chatContainer: {
    paddingHorizontal: 20,
    paddingVertical: 10,
    marginBottom: 50, // 입력창을 위해 여백 추가
  },
  messageContainer: {
    marginVertical: 5,
    padding: 10,
    borderRadius: 10,
  },
  botMessage: {
    backgroundColor: '#e6e6e6',
    alignSelf: 'flex-start',
  },
  userMessage: {
    backgroundColor: '#9dc6ff',
    alignSelf: 'flex-end',
  },
  messageText: {
    fontSize: 16,
    color: '#333',
  },
  buttonsContainer: {
    marginVertical: 10, // 버튼과 채팅 사이 여백 추가
  },
  row: {
    flexDirection: 'row',
    justifyContent: 'space-between', // 버튼 간격을 균등하게 조정
  },
  button: {
    backgroundColor: '#e6e6e6',
    paddingVertical: 8,
    paddingHorizontal: 10,
    borderRadius: 10,
    alignItems: 'center',
    justifyContent: 'center',
    flex: 1, // 버튼의 폭을 고르게 분배
    marginHorizontal: 5, // 버튼 간격
  },
  buttonText: {
    fontSize: 12,
    color: '#333',
  },
  queryButtonsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginVertical: 10,
  },
  queryButton: {
    backgroundColor: '#e6e6e6',
    paddingVertical: 8,
    paddingHorizontal: 10,
    borderRadius: 10,
    flex: 1,
    marginHorizontal: 5,
    alignItems: 'center',
  },
  queryButtonText: {
    fontSize: 12,
    color: '#333',
  },
  inputContainer: {
    flexDirection: 'row',
    padding: 10,
    borderTopWidth: 1,
    borderTopColor: '#ddd',
    backgroundColor: '#fff',
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
  },
  input: {
    flex: 1,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 20,
    paddingHorizontal: 15,
    fontSize: 16,
    backgroundColor: '#f9f9f9',
  },
  sendButton: {
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 15,
  },
  sendButtonText: {
    color: '#007bff',
    fontSize: 16,
  },
});

export default ChatbotScreen;
